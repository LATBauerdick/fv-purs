module Stuff where

import Prelude
import Math ( sqrt )
import Data.Ord (signum)
import Data.List ( List(..), (:))
import Data.String ( takeWhile, dropWhile )
import Data.Tuple ( Tuple(..), fst, snd )
import Data.Maybe ( Maybe(..), fromMaybe' )
import Data.Foldable ( class Foldable, foldr )
import Partial.Unsafe (unsafePartial, unsafePartialBecause, unsafeCrashWith)
import Unsafe.Coerce ( unsafeCoerce ) as Unsafe.Coerce
import Data.Char.Unicode ( isSpace )
import Data.List (fromFoldable)

-- | simultaneous 'quot' and 'rem'
quotRem :: Int -> Int -> (Tuple Int Int)
--quotRem             :: a -> a -> (a,a)
quotRem n d = if signum r == - signum d
                 then (Tuple (q+1) (r-d))
                 else qr
  where qr = divMod n d
        q = fst qr
        r = snd qr

-- | simultaneous 'div' and 'mod'
divMod :: Int -> Int -> (Tuple Int Int)
--divMod              :: a -> a -> (a,a)
divMod n d = (Tuple (n `div` d) (n `mod` d))

-- | 'words' breaks a string up into a list of words, which were delimited
-- | by white space.
words                   :: String -> List String
words s = fromFoldable $ map show tr05129e001412xx -- ??? fake it
words s                 =  case dropWhile isSpace s of
                                "" -> Nil
                                ss -> let
                                          w = takeWhile isSpace ss
                                          ws = dropWhile isSpace ss
                                      in w : words ws

-- | 'break', applied to a predicate @p@ and a list @xs@, returns a tuple where
-- | first element is longest prefix (possibly empty) of @xs@ of elements that
-- | /do not satisfy/ @p@ and second element is the remainder of the list:
--
-- > break (> 3) [1,2,3,4,1,2,3,4] == ([1,2,3],[4,1,2,3,4])
-- > break (< 9) [1,2,3] == ([],[1,2,3])
-- > break (> 9) [1,2,3] == ([1,2,3],[])
--
-- 'break' @p@ is equivalent to @'span' ('not' . p)@.

break :: forall a. (a -> Boolean) -> List a -> (Tuple (List a) (List a))
-- HBC version (stolen)
break _ Nil             =  (Tuple Nil Nil)
break p xs@(x:xs')
           | p x        =  (Tuple Nil xs)
           | otherwise  =  let yszs = break p xs' 
                               ys = fst yszs
                               zs = snd yszs
                           in (Tuple (x:ys) zs)

-- | 'unwords' is an inverse operation to 'words'.
-- It joins words with separating spaces.
unwords                 :: List String -> String
unwords Nil             =  ""
unwords ws              =  foldr1 (\w s -> w <> " " <> s) ws

-- | 'unlines' is an inverse operation to 'lines'.
-- It joins lines, after appending a terminating newline to each.
unlines                 :: List String -> String
unlines Nil = ""
unlines (l:ls) = l <> "\n" <> unlines ls

-- | A variant of 'foldr' that has no base case,
-- and thus may only be applied to non-empty structures.
--
-- @'foldr1' f = 'List.foldr1' f . 'toList'@
foldr1 :: forall a t. Foldable t => Show a => (a -> a -> a) -> t a -> a
foldr1 f xs = fromMaybe' ( \_ -> error $ "foldr1: empty structure" <> show xx) xx
                         where
  xx = (foldr mf Nothing xs)
  mf :: a -> Maybe a -> Maybe a
  mf acc m = Just (case m of
                         Nothing -> acc
                         Just y  -> f acc y)

undefined :: forall a. a
undefined = Unsafe.Coerce.unsafeCoerce unit

error :: forall a. String -> a
error = unsafeCrashWith

diagonal :: Number -> Number -> Number
diagonal w h = sqrt (w*w + h*h)

gcd' :: Int -> Int -> Int
gcd' n 0 = n
gcd' 0 m = m
gcd' n m | n > m = gcd' (n - m) m
         | otherwise = gcd' n (m - n)


tr05129e001412xx :: Array Number
tr05129e001412xx= [
   3.355679512023926,      3.489715576171875,      7.110095977783203,
  0.2884106636047363,     0.2967556118965149,     0.4457152485847473,
  0.2967556118965149,     0.3057302236557007,     0.4589158892631531,
  0.4457152485847473,     0.4589158892631531,     0.7007381319999695,
  4.5451703E-03,
           6.0,
  9.0513890609145164E-04,  1.174186706542969,     0.7913663387298584,
 -5.4129425436258316E-02,  1.309153556823730,
  3.0409931517372257E-11, 3.0817798313265143E-10,-2.6150961396353978E-09,
 -6.2086684238238377E-08, 1.9006475560079394E-10, 3.0817798313265143E-10,
  3.5358195873413933E-06,-5.5664237663677341E-09,-4.7704439509743679E-08,
 -3.5389247932471335E-04,-2.6150961396353978E-09,-5.5664237663677341E-09,
  3.9334932466772443E-07, 9.2603177108685486E-06,-4.2692363422247581E-07,
 -6.2086684238238377E-08,-4.7704439509743679E-08, 9.2603177108685486E-06,
  2.7857377426698804E-04,-1.2511900422396138E-05, 1.9006475560079394E-10,
 -3.5389247932471335E-04,-4.2692363422247581E-07,-1.2511900422396138E-05,
  4.6403184533119202E-02,
 -3.2948562875390053E-04, -1.287435531616211,      3.964143753051758,
 -5.5920504033565521E-02,  2.172087669372559,
  1.0773015292342425E-11, 1.0870629917059116E-11,-9.4798713323740458E-10,
 -2.6224558524745589E-08, 5.1304871462320989E-10, 1.0870629917059116E-11,
  1.3991236755828140E-06, 6.1739335865951261E-11, 3.9363889925425610E-09,
 -1.3362320896703750E-04,-9.4798713323740458E-10, 6.1739335865951261E-11,
  1.0642112613368226E-07, 3.0040880574233597E-06,-5.7571856615368233E-08,
 -2.6224558524745589E-08, 3.9363889925425610E-09, 3.0040880574233597E-06,
  1.0815335554070771E-04,-1.6780244322944782E-06, 5.1304871462320989E-10,
 -1.3362320896703750E-04,-5.7571856615368233E-08,-1.6780244322944782E-06,
  1.5890464186668396E-02,
  8.6099491454660892E-04,  1.190025329589844,     0.7718949913978577,
  -1.004449844360352,      4.974927902221680,
  7.8076378695612902E-10,-2.4755367200590683E-10,-1.0359136126680824E-07,
 -6.7278465394338127E-06, 4.4596313841793744E-07,-2.4755367200590683E-10,
  6.6328821048955433E-06, 2.8732655366070503E-08, 1.5816522136447020E-06,
 -8.9828821364790201E-04,-1.0359136126680824E-07, 2.8732655366070503E-08,
  1.3829509043716826E-05, 9.0345303760841489E-04,-5.9563441027421504E-05,
 -6.7278465394338127E-06, 1.5816522136447020E-06, 9.0345303760841489E-04,
  5.9390719980001450E-02,-3.8860931526869535E-03, 4.4596313841793744E-07,
 -8.9828821364790201E-04,-5.9563441027421504E-05,-3.8860931526869535E-03,
  0.1251238286495209,   
 -1.7263018526136875E-03,  1.039703369140625,     0.8659646511077881,
  0.2599024176597595,      2.128120422363281,
  1.5148657328545312E-10,-7.3402152411805588E-11,-1.4714315987873761E-08,
 -6.3192055677063763E-07,-3.4522088299127063E-08,-7.3402152411805588E-11,
  1.5436929743373184E-06,-5.5447091362736955E-10,-8.1613094948806975E-08,
 -1.5131152758840472E-04,-1.4714315987873761E-08,-5.5447091362736955E-10,
  1.5367089645224041E-06, 6.8635607021860778E-05, 4.2090109673154075E-06,
 -6.3192055677063763E-07,-8.1613094948806975E-08, 6.8635607021860778E-05,
  3.2065853010863066E-03, 1.9913408323191106E-04,-3.4522088299127063E-08,
 -1.5131152758840472E-04, 4.2090109673154075E-06, 1.9913408323191106E-04,
  1.7373077571392059E-02,
  1.2108741793781519E-03,  1.282915115356445,     0.8532057404518127,
  8.5045360028743744E-03,  1.965600013732910,
  3.6512477069594595E-11, 8.9357354848829118E-10,-3.3482463468459400E-09,
 -8.1875484170268464E-08, 9.6036401053822829E-10, 8.9357354848829118E-10,
  3.0787202831561444E-06,-2.2171841251861224E-08,-2.7003440550288360E-07,
 -1.5695679758209735E-04,-3.3482463468459400E-09,-2.2171841251861224E-08,
  5.5774097518224153E-07, 1.3075616152491421E-05,-4.9851792027766351E-07,
 -8.1875484170268464E-08,-2.7003440550288360E-07, 1.3075616152491421E-05,
  3.5224124439992011E-04,-1.4417236343433615E-05, 9.6036401053822829E-10,
 -1.5695679758209735E-04,-4.9851792027766351E-07,-1.4417236343433615E-05,
  1.7541546374559402E-02,
 -7.3608336970210075E-04,  1.297574043273926,     0.8316786885261536,
  -1.011060714721680,     -2.867138862609863,
  2.0176718074083055E-09, 9.1418789205377493E-10,-2.5551665316925209E-07,
 -1.5318933947128244E-05,-3.4175937457803229E-07, 9.1418789205377493E-10,
  7.4829795266850851E-06,-1.1038221003900617E-07, 6.1672653828281909E-06,
 -9.3757675494998693E-04,-2.5551665316925209E-07,-1.1038221003900617E-07,
  3.2483072573086247E-05, 1.9545238465070724E-03, 4.3123862269567326E-05,
 -1.5318933947128244E-05,-6.1672653828281909E-06, 1.9545238465070724E-03,
  0.1181144416332245,     2.5763250887393951E-03,-3.4175937457803229E-07,
 -9.3757675494998693E-04, 4.3123862269567326E-05, 2.5763250887393951E-03,
  0.1227073818445206]

