module Types ( MCtruth (..), VHMeas (..) ) where

import Prelude
import Data.Monoid
import Data.Generic.Rep (class Generic)
import Data.Generic.Rep.Show (genericShow)

data VHMeas = VHMeas {
    vertex      :: XMeas
  , helices     :: Array HMeas
                     }
derive instance genericVMHeas :: Generic VHMeas
instance showVHMeas :: Show VHMeas where show = genericShow

instance monoidVHMeas :: Monoid VHMeas where
  mappend (VHMeas v hs) (VHMeas _ hs') = VHMeas v ( hs <> hs' ) -- ???
  mempty = VHMeas (XMeas (Matrix.zero 3 1) (Matrix.zero 3 3)) []

data MCtruth = MCtruth {
    pu_zpositions :: Array Double
                       }
derive instance genericMCtruth :: Generic MCtruth
instance showMCtruth :: Show MCtruth where show = genericShow

type X3 = V
type C33 = M
data XMeas = XMeas X3 C33 -- 3-vector and covariance matrix for position/vertex measurement

showXMeas :: XMeas -> String
showXMeas xm = "??? showXMeas not yet implemented"
-- instance showXMeas :: Show XMeas where
--   show = "??? to be implemented"

instance monoidXMeas :: Monoid XMeas where
  mappend (XMeas x1 cx1) (XMeas x2 cx2) = XMeas (x1 + x2) (cx1 + cx2)
  mempty = XMeas (Matrix.zero 3 1) (Matrix.zero 3 3)

type H5 = V
type C55 = M
data HMeas = HMeas H5 C55 Double -- 5-vector and covariance matrix for helix measurement

showHMeas :: HMeas -> String
showHMeas hm = "??? showHMeas not yet implemented"
